package main

import (
	"log"
	"net/http"
	"os"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/gin-gonic/gin"
)

type User struct {
	ID       uint64 `json: "id"`
	UserName string `json: "username"`
	Password string `json: "password"`
}

var user = User{
	ID:       100,
	UserName: "ISSuh",
	Password: "test",
}

var (
	router = gin.Default()
)

func CreateToken(id uint64) (string, error) {
	os.Setenv("ACCESS_SECRET", "jdnfksdmfksd")

	atClaims := jwt.MapClaims{}
	atClaims["authorized"] = true
	atClaims["user_id"] = id
	atClaims["exp"] = time.Now().Add(time.Minute * 15).Unix()
	at := jwt.NewWithClaims(jwt.SigningMethodHS256, atClaims)

	token, err := at.SignedString([]byte(os.Getenv("ACCESS_SECRET")))
	if err != nil {
		return "", err
	}
	return token, nil
}

func Login(c *gin.Context) {
	var u User

	if err := c.ShouldBindJSON(&u); err != nil {
		c.JSON(http.StatusUpgradeRequired, "Invalid JSON provide")
		return
	}

	if user.UserName != u.UserName || user.Password != u.Password {
		c.JSON(http.StatusUnauthorized, "Please provide valid login details")
		return
	}

	token, err := CreateToken(u.ID)
	if err != nil {
		c.JSON(http.StatusUnprocessableEntity, err.Error())
		return
	}

	c.Header()
	c.JSON(http.StatusOK, token)
}

func main() {
	router.POST("/login", Login)

	if err := router.Run(); err != nil {
		log.Fatal(err)
	}
}
